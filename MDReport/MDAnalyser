#!/bin/bash
#
# Copyright (c) 2017 Diego Gomes and Marco Cecchini
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#  
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#  
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

#
# How to use:
# Step 1 - Change what's necessary in the configuration below 
# Step 2 - Run this at "summary" folder
# Step 3 - Smile
#
# Configuration -----------------------------------------------------
#

# Source "amber.sh". 
  source /home/dgomes/software/amber16/amber.sh

# Where are the simulations? 
  basedir=$PWD

# List of protein names
  folder_list="3AMD 3AXX"

# List of variables
  subfolder_list="310 353"


# WARNING! - ATTENTION ! - ACHTUNG ! ATENCAO! - ATENCION !
#
# Do not change anything below unless you know what you're doing.
# Ne modifiez rien ci-dessous, sauf si vous savez ce que vous faites.
# Ändern Sie nichts unter, wenn Sie nicht wissen, was Sie tun.
# Nao modifique nada abaixo, salvo se voce sabe o que faz.
# No cambie nada abajo a menos que sepa lo que está haciendo.
# 
# WARNING! - ATTENTION ! - ACHTUNG ! ATENCAO! - ATENCION !


# Functions ---------------------------------------------------------

#bash colors 
RED="\e[0;31m"
MAGENTA="\e[35m"
BLUE="\e[0;34m"
GREEN="\e[0;32m"
PURPLE="\e[0;35m"
NC="\033[0m"

welcome() {
echo -e "
    ${MAGENTA}MD Report v 0.7.1 ${NC}- Amber Analysis - Copyright 2017
  Molecular Dynamics Simulation Report

             Developed by
 Priscila SFC Gomes(1), Nicolas Martin(2) 
Marco Cecchini(2), Diego E. B. Gomes(1,2,3)
---------------------------------------------
"

sleep 2
}

help() {
echo -e "
Usage: ${BLUE}MDAnalyser [-rmsd] [-rmsf] [-gyrate] [-surf] [-molsurf] [-plot] [-h] ${NC}

Available options:
        -rmsd  - RMSD
        -rmsf  - RMSF by residue
      -radgyr  - Radius of gyration
     -molsurf  - Molecular surface area
      -hbonds  - Hydrogen bonds (NOT ENABLED)
-hbonds_intra  - Hydrogen bonds (intramolecular)
 -plot (soon)  - plot graphs
      -saltbr  - Salt bridges
"
exit 0
}


list_folders() {
echo -e "${BLUE}Current simulations:${NO_COLOUR}\n${folder_list}\n"
echo -e "${BLUE}Current temperatures:${NO_COLOUR}\n${subfolder_list}\n"
}

do_rmsd() {
cpptraj.OMP <<EOF
parm      ${TOP}
reference ${REF}
trajin    ${TRJ}
rms reference mass @CA,N,C,O out rmsd_bb.dat
go
quit
EOF
}

do_rmsf() {
cpptraj.OMP <<EOF
parm      ${TOP}
reference ${REF}
trajin    ${TRJ}
rms reference mass out rmsd_bb.dat @CA,N,C,O
atomicfluct out bfactor.dat @CA byres bfactor
atomicfluct out rmsf_bb.dat @CA,N,C,O byres
go
quit
EOF
}

do_secstruc(){
echo "toaki"
cpptraj.OMP <<EOF
parm      ${TOP}
reference ${REF}
trajin    ${TRJ}
secstruct out dssp.gnu totalout dssp_total.dat sumout dssp.dat
go
quit
EOF
}


do_hbonds() {
# so far only intramolecular H-bonds.
cpptraj.OMP <<EOF
parm      ${TOP}
reference ${REF}
trajin    ${TRJ}
hbond hb1 out hbonds.dat avgout hbonds_avg.dat \
series uuseries hbond.agr uvseries uvhbonds.agr
EOF
}


do_radgyr() {
cpptraj.OMP <<EOF
parm      ${TOP}
reference ${REF}
trajin    ${TRJ}
radgyr !(@H=) out radgyr.dat mass nomax
EOF

}

do_native() {
cpptraj.OMP <<EOF
parm      ${TOP}
reference ${REF}
trajin    ${TRJ} 1 last 100
nativecontacts !@H= out nativecontacts.dat writecontacts contacts.dat resout res_contacts.dat 
EOF
}

do_pca() {
cpptraj.OMP <<EOF
# Topology
parm ${TOP}

# Reference frame for the firs RMS
reference ${REF}

# Input trajectory
trajin ${TRJ}

# Fit trajectory then compute average
rms reference mass @CA,N,C,O
average crdset AVG

run

#--------------------------------------------------------------
# Step two. RMS-Fit to average structure. 
# Calculate covariance matrix.
# Save the fit coordinates.
#--------------------------------------------------------------
rms ref AVG @CA,N,C,O
matrix covar name matrixdat @CA,N,C,O out covmat-ca_1.dat
createcrd CRD1

run

#--------------------------------------------------------------
# Step three. Diagonalize matrix.
#--------------------------------------------------------------
runanalysis diagmatrix matrixdat vecs 5 name MyEvecs out MyEvecs.dat

#--------------------------------------------------------------
# Step four. Project saved fit coordinates along eigenvectors 1 and 2
#--------------------------------------------------------------
crdaction CRD1 projection evecs MyEvecs @CA,N,C,O out project.dat beg 1 end 5
quit
EOF
}

do_molsurf() {
cpptraj.OMP <<EOF
parm      ${TOP}
reference ${REF}
trajin    ${TRJ}
molsurf out molsurf.dat
go
quit
EOF
}

do_surf() {
cpptraj.OMP <<EOF
parm      ${TOP}
reference ${REF}
trajin    ${TRJ}
surf out surf.dat
go
quit
EOF
}


do_saltbr() {
cpptraj.OMP <<EOF
parm      ${TOP}
reference ${REF}
trajin    ${TRJ}
hbond acceptormask :ASP@OD1,ASP@OD2,GLU@OE1,GLU@OE2 donnormask :ARG@NH1,ARG@NH2,ARG@NE,LYZ@NZ distance 4 out saltbr.dat avgout saltbr_avg.dat series uuseries saltbr.agr angle -1
go
quit
EOF
}

run_analysis() {
# Run analysis ---------------------|
for folder in ${folder_list} ; do
  for subfolder in ${subfolder_list} ; do

    # create folder_subfolder where if needed
    if [ ! -d  "${basedir}/${folder}_${subfolder}" ]; then
      mkdir -p "${basedir}/${folder}_${subfolder}"
    fi

    cd ${basedir}/${folder}_${subfolder}

    TOP=../${folder}_${subfolder}.prmtop
    REF=../${folder}_${subfolder}.rst7
    TRJ=../${folder}_${subfolder}.nc

    # pick which one to do based on the result of the case statement
    if [         "$rmsd" == "true" ] ; then  do_rmsd     ; fi
    if [         "$rmsf" == "true" ] ; then  do_rmsf     ; fi
    if [       "$hbonds" == "true" ] ; then  do_hbonds   ; fi
    if [       "$radgyr" == "true" ] ; then  do_radgyr   ; fi
    if [     "$secstruc" == "true" ] ; then  do_secstruc ; fi
    if [      "$molsurf" == "true" ] ; then  do_molsurf  ; fi
    if [       "$native" == "true" ] ; then  do_native   ; fi
    if [          "$pca" == "true" ] ; then  do_pca      ; fi
    if [         "$surf" == "true" ] ; then  do_surf     ; fi
    if [       "$saltbr" == "true" ] ; then  do_saltbr   ; fi


#    if [    "$plot" == "true" ] ; then  do_plot     ; fi

  done
done
}

error() {
if [ $1 -eq 1 ] ; then echo -e "${RED}[ERROR]${NC} Unknown argument: $2" ; fi
if [ $1 -eq 2 ] ; then echo -e "${RED}[ERROR]${NC} Program run without arguments"   ; fi
echo -e "
Usage: ${BLUE}MDAnalyser [-rmsd] [-rmsf] [-gyrate] [-molsurf] [-plot] [-h] ${NC}

For help, type: ${RED}MDAnalyser -h ${NC}"
exit 1
}



# Main program ------------------------------------------------------

# Check if command was run without arguments
if [ "$#" -eq "0" ] ; then  error 2 ; fi

# Reset all script variables
help="false"
rmsd="false"
rmsf="false"
rmsd_bb="false"
rmsf_bb="false"
radgyr="false"
molsurf="false"
secstruc="false"
native="false"
pca="false"
plot="false"
surf="false"
saltbr="false"
# start the case-ing
while test -n "$1"; do
   case "$1" in
    -rmsd)
       rmsd="true"
       shift
       ;;
    -rmsf)
       rmsf="true"
       shift
       ;;
    -radgyr)
       radgyr="true"
       shift
       ;;
    -secstruc)
       secstruc="true"
       shift
       ;;
    -hbonds)
       hbonds="true"
       shift
       ;;
    -molsurf)
       molsurf="true"
       shift
       ;;
    -surf)
       surf="true"
       shift
       ;;
    -native)
       native="true"
       shift
       ;;
    -pca)
       pca="true"
       shift
       ;;
    -saltbr)
       saltbr="true"
       shift
       ;;
    -plot)
       plot="true"
       shift
       ;;
    -h)
       help
       ;;
     *)
       error 1 $1
  esac
done

# Do the analysis
welcome
run_analysis

exit 0
