#!/bin/bash

run_folder="$PWD"

# Create a time stamp, in order to backup PLANTS output if it already exists
datetime=$(date "+%Y%m%d%H%M%S")

# Time format
TIMEFORMAT='Execution time : %1lR'

# Start up
source $CHEMFLOW_HOME/DockFlow/DockFlow_interface.bash
source $CHEMFLOW_HOME/DockFlow/DockFlow_functions.bash
source $CHEMFLOW_HOME/common/mazinger_functions.bash
source $CHEMFLOW_HOME/common/ProgressBar.bash
source $CHEMFLOW_HOME/common/ChemFlow_functions.bash

# Welcome user
welcome

# Source ChemFlow config file for paths
source $CHEMFLOW_HOME/ChemFlow.config

# User interface
DF_CLI "$@"

# Write user parameters to a temporary file
print_vars > temp.config

# if config file specified using the -f flag
if [ ! -z "$CONFIG_FILE" ]; then
  echo "Reading configuration from $CONFIG_FILE"
  source "$CONFIG_FILE"
else
# if a config file was not specified
  # if a config file exists in the current directory
  if [ -f DockFlow.config ]; then
    # Use this one instead
    source DockFlow.config
  # if no config file was specified and doesn't exist in the current directory
  else
    echo "${RED}FATAL ERROR${NC} : No configuration file found for DockFlow"
    usage
    exit 1
  fi
fi

# Overwrite parameters in config files with user parameters
write_DF_config

# Prepare folders and input file to run
prepare_docking

# Run plants with the options
time run_plants

# Concatenate final results, serial instead of parallel
cat ${run_folder}/docking/ranking/*.csv  >> ${run_folder}/docking/ranking.csv
cat ${run_folder}/docking/features/*.csv >> ${run_folder}/docking/features.csv
rm -rf ${run_folder}/docking/{ranking,features}/

# copy config file to output folder
cp ${run_folder}/DockFlow.config ${run_folder}/docking/

# Sort results
if [ -f docking/ranking.csv ]; then
  # copy header
  header=$(head -1 docking/ranking.csv)
  # sort
  # The LC_ALL=C is needed to get an accurate sorting
  tail -n +2 docking/ranking.csv | LC_ALL=C sort -t, -g -k2 -o docking/ranking_sorted.csv
  # insert header back into sorted file
  sed -i "1s/^/$header\n/" docking/ranking_sorted.csv
fi

# If some results are missing, count how many and output it
if [ -f docking/errors.csv ]; then
  errorcount=$(cat docking/errors.csv | wc -l)
  echo -e "${RED}ERRORS detected${NC} : ${errorcount}"
  echo "See docking/errors.csv for more info"
fi

# exit
exit_message
