#!/bin/bash

run_folder="$PWD"

# Create a time stamp, in order to backup PLANTS output if it already exists
datetime=$(date "+%Y%m%d%H%M%S")

# Time format
TIMEFORMAT='Execution time : %1lR'

# Start up
source $CHEMFLOW_HOME/DockFlow/DockFlow_interface.bash
source $CHEMFLOW_HOME/DockFlow/DockFlow_functions.bash
source $CHEMFLOW_HOME/common/mazinger_functions.bash
source $CHEMFLOW_HOME/common/ProgressBar.bash
source $CHEMFLOW_HOME/common/ChemFlow_functions.bash
source $CHEMFLOW_HOME/common/colors.bash

# Welcome user
welcome

# Source ChemFlow config file for paths
source $CHEMFLOW_HOME/ChemFlow.config

# User interface
DF_CLI "$@"

# Write user parameters to a temporary file
print_vars > temp.config

# if config file specified using the -f flag
if [ ! -z "$CONFIG_FILE" ]; then
  echo "Reading configuration from $CONFIG_FILE"
  source "$CONFIG_FILE"
else
# if a config file was not specified
  echo -e "${RED}FATAL ERROR${NC} : No configuration file found for DockFlow"
  usage
  exit 1
fi

# Overwrite parameters in config files with user parameters
write_DF_config

# Prepare folders and input file to run
prepare_docking

#######################
# Run docking
#######################
if $(list_include_item "chemplp plp plp95" "${scoring_function}"); then
  # Run plants with the options
  time run_plants
  # Concatenate final results, serial instead of parallel
  cat ${output_folder}/ranking/*.csv  >> ${output_folder}/ranking.csv
  cat ${output_folder}/features/*.csv >> ${output_folder}/features.csv
  rm -rf ${output_folder}/{ranking,features}/
elif [ "${scoring_function}" = "vina" ]; then
  # Run vina
  time run_vina
  # Concatenate final results, serial instead of parallel
  cat ${output_folder}/ranking/*.csv  >> ${output_folder}/ranking.csv
  rm -rf ${output_folder}/ranking/
# insert other scoring functions here
fi

# copy config file to output folder
cp ${run_folder}/DockFlow.config ${output_folder}/

# Sort results
if [ -f ${output_folder}/ranking.csv ]; then
  # copy header
  header=$(head -1 ${output_folder}/ranking.csv)
  # sort
  # The LC_ALL=C is needed to get an accurate sorting
  tail -n +2 ${output_folder}/ranking.csv | LC_ALL=C sort -t, -g -k2 -o ${output_folder}/ranking_sorted.csv
  # insert header back into sorted file
  sed -i "1s/^/$header\n/" ${output_folder}/ranking_sorted.csv
fi

# If some results are missing, count how many and output it
if [ -f ${output_folder}/errors.csv ]; then
  errorcount=$(cat ${output_folder}/errors.csv | wc -l)
  echo -e "${RED}ERRORS detected${NC} : ${errorcount}"
  echo "See docking/errors.csv for more info"
fi

# exit
exit_message
